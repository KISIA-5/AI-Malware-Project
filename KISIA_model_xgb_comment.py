import xgboost as xgb
import numpy as np
import pandas as pd
import sys
import os
import time
from sklearn.model_selection import mal_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns

# Data 읽기
def read_data():
    # csv 파일을 불러와서 data에 저장
    data = pd.read_csv('대충 뽑은 데이터csv파일 이름')
    # X는 data의 마지막 열을 제외한 모든 열
    # y는 data의 마지막 열
    X = data.iloc[:, :-1]
    y = data.iloc[:, -1]
    # X와 y를 반환
    return X, y

# Data를 info set과 test set으로 나누는 함수
def split_data(X, y):
    # info set과 test set으로 나누기 위한 비율 설정
    X_info, X_test, y_info, y_test = mal_test_split(X, y, test_size=0.2, random_state=0)
    return X_info, X_test, y_info, y_test

# XGBoost 모델을 만드는 함수
def first_model(X_info, y_info):
    # XGBoost 모델을 만들기 위한 파라미터 설정
    model = xgb.XGBClassifier()
    model.fit(X_info, y_info)
    return model

# Test model을 만드는 함수
def test_model(model, X_test, y_test):
    # 예측
    y_pred = model.predict(X_test)
    # 정확도
    accuracy = accuracy_score(y_test, y_pred)
    # 정확도 출력
    print('Accuracy: %.2f%%' % (accuracy * 100.0))

    # 분류 리포트 출력
    print('Classification report:')
    print(classification_report(y_test, y_pred))

    # confusion matrix 출력
    print('Confusion matrix:')
    print(confusion_matrix(y_test, y_pred))

    # ROC curve 출력
    print('ROC curve:')

    # ROC curve를 그리기 위한 변수 설정
    y_pred_prob = model.predict_proba(X_test)[:, 1]
    fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)

    # ROC curve 그리기
    plt.plot([0, 1], [0, 1], 'k--')
    plt.plot(fpr, tpr, label='XGBoost')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('XGBoost ROC Curve')
    plt.show()

    # ROC AUC score 출력
    auc = roc_auc_score(y_test, y_pred_prob)
    print('AUC: %.2f%%' % (auc * 100.0))

    # model 저장
    model.save_model('model.bin')
    print('Model saved')

    # model 불러오기
    model = xgb.Booster()
    model.load_model('model.bin')
    print('Model loaded')

# main 함수
def main():
    # Data 읽기
    X, y = read_data()

    # Data를 info set과 test set으로 나누기
    X_info, X_test, y_info, y_test = split_data(X, y)

    # XGBoost 모델 만들기
    model = first_model(X_info, y_info)

    # Test model 만들기
    test_model(model, X_test, y_test)
    